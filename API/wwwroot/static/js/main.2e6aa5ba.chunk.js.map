{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ActivityCard.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/common/util/hooks.ts","features/users/RegisterSuccess.tsx","features/users/ConfirmEmail.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","startsWith","userStore","logout","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","refreshToken","verifyEmail","email","resendEmailConfirm","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listUserActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","loadingActivities","activeTab","eventActiveTab","setActiveTab","setEventActiveTab","bio","loadProfile","photo","photos","isMain","setImage","p","activityStore","loadFollowings","loadUserActivities","userActivities","UserStore","fbAccessToken","fbLoading","refreshTokenTimeout","creds","setToken","startRefreshTokenTimer","modalStore","closeModal","window","localStorage","removeItem","getUser","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","stopRefreshTokenTimer","jwtToken","atob","split","timeout","exp","now","setTimeout","clearTimeout","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","isLoggedIn","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","length","slice","concat","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","Divider","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","isCurrentUser","editProfileMode","setEditProfileMode","Tab","Pane","panes","menuItem","CardGroup","itemsPerRow","menu","onTabChange","activeIndex","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","followingCount","PrivateRoute","Component","component","rest","useQuery","useLocation","search","RegisterSuccess","success","ConfirmEmail","Status","setStatus","handleConfirmEmailResend","getBody","location","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.2e6aa5ba.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const {data, status, config, headers} = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            if (status === 401 && headers['www-authenticate']?.startsWith('Bearer error=\"invalid_token\"')) {\r\n                store.userStore.logout();\r\n                toast.error('Session expired - please login again');\r\n            }\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break\r\n    }\r\n\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests\r\n        .post<User>(`/account/fbLogin?accessToken=${accessToken}`, {}),\r\n    refreshToken: () => requests.post<User>('/account/refreshToken', {}),\r\n    verifyEmail: (token: string, email: string) => \r\n        requests.post<void>(`/account/verifyEmail?token=${token}&email=${email}`, {}),\r\n    resendEmailConfirm: (email: string) =>\r\n        requests.get(`/account/resendEmailConfirmationLink?email=${email}`),\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: {'Content-type': 'multipart/form-data'}\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put<void>('/profiles/', profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => \r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listUserActivities: (username: string, predicate: string) => \r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date | null;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break\r\n            case 'isHost':\r\n                resetPredicate()\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n                break;\r\n        }\r\n    }\r\n    \r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \r\n        a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        );\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        \r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            );\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n} ","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    activities: UserActivity[] = [];\r\n    loadingFollowings = false;\r\n    loadingActivities = false;\r\n    activeTab = 0;\r\n    eventActiveTab = 0;\r\n    \r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else if (activeTab === 2) {\r\n                    const predicate = 'future';\r\n                    this.loadUserActivities(this.profile!.username, predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n        \r\n        reaction(\r\n            () => this.eventActiveTab,\r\n            eventActiveTab => {\r\n                let predicate = 'future';\r\n                switch (eventActiveTab) {\r\n                    case 1:\r\n                        predicate = 'past';\r\n                        break;\r\n                    case 2:\r\n                        predicate = 'hosting';\r\n                        break\r\n                    default:\r\n                        break;\r\n                }\r\n                this.loadUserActivities(this.profile!.username, predicate);\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n    \r\n    setEventActiveTab = (eventActiveTab: any) => {\r\n        this.eventActiveTab = eventActiveTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile){\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    updateProfile = async (profile: Profile) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.displayName = profile.displayName;\r\n                    this.profile.bio = profile.bio;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.error(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username \r\n                        && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username){\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n    \r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const userActivities = await agent.Profiles.listUserActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.activities = userActivities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n    refreshTokenTimeout: any;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async() => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            await agent.Account.register(creds);\r\n            history.push(`/account/registerSuccess?email=${creds.email}`);\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                this.startRefreshTokenTimer(user);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, {scope: 'public_profile,email'})\r\n        }\r\n    }\r\n\r\n    refreshToken = async () => {\r\n        this.stopRefreshTokenTimer();\r\n        try {\r\n            const user = await agent.Account.refreshToken();\r\n            runInAction(() => this.user = user);\r\n            store.commonStore.setToken(user.token);\r\n            this.startRefreshTokenTimer(user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    private startRefreshTokenTimer(user: User) {\r\n        const jwtToken = JSON.parse(atob(user.token.split('.')[1]));\r\n        const expires = new Date(jwtToken.exp * 1000);\r\n        const timeout = expires.getTime() - Date.now() - (60 * 1000);\r\n        this.refreshTokenTimeout = setTimeout(this.refreshToken, timeout);\r\n    }\r\n\r\n    private stopRefreshTokenTimer() {\r\n        clearTimeout(this.refreshTokenTimeout);\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                } else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Dropdown, Image, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const {userStore: { user, logout, isLoggedIn }} = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{marginRight: '10px'}}/>\r\n                    Reactivities\r\n                </Menu.Item>\r\n                {isLoggedIn &&\r\n                <>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities'/>\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors'/>\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity'/>\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n                </>}\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25}}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({profile}: Props){\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    color='teal' \r\n                    content={profile.following ? 'Following' : 'Not following' }\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{width: '100%'}}>\r\n                <Button \r\n                    fluid \r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'} \r\n                    content={profile.following ? 'Unfollow' : 'Follow'} \r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props){\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || 'assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{(profile.bio !== null && profile.bio!.length > 40) \r\n                    ? (profile.bio?.slice(0, 40).concat(\"...\"))\r\n                    : (profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Image, List, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                                size='mini' \r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({activity}: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>\r\n                            </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList(){\r\n    const {activityStore} = useStore();\r\n    const {groupedActivities} = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal' >\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilters';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const {activityStore} = useStore();\r\n    const {loadActivities, activityRegistry, setPagingParams, pagination} = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: error.response.data}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik \r\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error}))}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} \r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button, Divider } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const {userStore, modalStore} = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button \r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n// interface Props {\r\n//     placeholder: string;\r\n//     name: string;\r\n//     label?: string;\r\n// }\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, \r\n        loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity title is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n    \r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n    \r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik \r\n                validationSchema={validationSchema}\r\n                enableReinitialize \r\n                initialValues={activity} \r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput \r\n                            placeholderText='Date' \r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button \r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right' \r\n                            positive type='submit' content='Submit' \r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport {Segment, Header, Comment, Loader} from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup'\r\nimport {formatDistanceToNow} from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({activityId}: Props) {\r\n    const {commentStore} = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{border: 'none'}}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, {resetForm}) => \r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{body: ''}}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({isSubmitting, isValid, handleSubmit}) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{position: 'relative'}}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea \r\n                                            placeholder='Enter your comment (Enter to submit, SHIT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'}/>\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{whiteSpace: 'pre-wrap'}}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\r\n    const {activityStore: {updateAttendance, loading, cancelActivityToggle}} = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{padding: '0'}}>\r\n                {activity.isCancelled && \r\n                    <Label style={{position: 'absolute', zIndex: 1000, left: -14, top: 20}} \r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{color: 'white'}}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} \r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`} \r\n                            color='orange' \r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                    \r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport{format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar ({ activity: {attendees, host} }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            { attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && \r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, {useEffect} from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport { useState } from 'react';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Form, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileAbout({ profile }: Props) {\r\n    const history = useHistory();\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, updateProfile, loading} = profileStore;\r\n    const [editProfileMode, setEditProfileMode] = useState(false);\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required('displayName is a required field'),\r\n    })\r\n\r\n    function handleFormSubmit(profile: Profile): any {\r\n        setEditProfileMode(false);\r\n        updateProfile(profile).then(() => history.push(`/profiles/${profile.username}`));\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"user\" content={ \"About \" + profile.displayName } />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated=\"right\"\r\n                            basic\r\n                            content={editProfileMode ? \"Cancel\" : \"EditProfile\"}\r\n                            onClick={() => setEditProfileMode(!editProfileMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {editProfileMode ? (\r\n                    <Formik \r\n                        validationSchema={validationSchema}\r\n                        enableReinitialize \r\n                        initialValues={profile} \r\n                        onSubmit={values => handleFormSubmit(values)}>\r\n                        {({ handleSubmit, isValid, dirty }) => (\r\n                            <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                                <MyTextInput name='displayName' placeholder='Display Name' />\r\n                                <MyTextArea rows={3} placeholder='Add your Bio' name='bio' />\r\n                                <Button \r\n                                    disabled={loading || !dirty || !isValid}\r\n                                    loading={loading} floated='right' \r\n                                    positive type='submit' content='Update profile'\r\n                                />\r\n                            </Form>\r\n                        )}\r\n                    </Formik>) : (\r\n                    <Grid.Column width={16}>\r\n                        <p>{profile.bio}</p>\r\n                    </Grid.Column>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});\r\n\r\n\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Image } from \"semantic-ui-react\";\r\nimport { UserActivity } from \"../../app/models/profile\";\r\n\r\ninterface Props {\r\n    activity: UserActivity;\r\n}\r\n\r\nexport default observer(function ActivityCard({activity}: Props){\r\n    return (\r\n        <Card as={Link} to={`/activities/${activity.id}`}>\r\n            <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid />\r\n            <Card.Content>\r\n                <Card.Header>{activity.title}</Card.Header>\r\n                <Card.Description>\r\n                    {activity.date}\r\n                </Card.Description>\r\n                {/* <Card.Description>{activity.date?.toLocaleTimeString()}</Card.Description> */}\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { Tab, Grid, CardGroup, Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ActivityCard from \"./ActivityCard\";\r\n\r\nexport default observer(function ProfileActivities() {\r\n    const {profileStore} = useStore();\r\n    const {activities, loadingActivities} = profileStore;\r\n    const panes = [\r\n        {\r\n          menuItem: 'Future Events',\r\n          render: () => <Tab.Pane loading={loadingActivities} attached={false}>\r\n                <CardGroup itemsPerRow={4}>\r\n                    {activities.map(activity => (\r\n                        <ActivityCard key={activity.title} activity={activity} />\r\n                    ))}\r\n                </CardGroup>\r\n            </Tab.Pane>,\r\n        },\r\n        {\r\n          menuItem: 'Past Events',\r\n          render: () => <Tab.Pane loading={loadingActivities} attached={false}>\r\n                <CardGroup itemsPerRow={4}>\r\n                    {activities.map(activity => (\r\n                        <ActivityCard key={activity.title} activity={activity} />\r\n                    ))}\r\n                </CardGroup>\r\n            </Tab.Pane>,\r\n        },\r\n        {\r\n          menuItem: 'Hosting',\r\n          render: () => <Tab.Pane loading={loadingActivities} attached={false}>\r\n                <CardGroup itemsPerRow={4}>\r\n                    {activities.map(activity => (\r\n                        <ActivityCard key={activity.title} activity={activity} />\r\n                    ))}\r\n                </CardGroup>\r\n            </Tab.Pane>,\r\n        },\r\n      ]\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='calendar'\r\n                        content={'Activites'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab \r\n                        \r\n                        menu={{ secondary: true, pointing: true }} \r\n                        panes={panes}\r\n                        onTabChange={(e, data) => profileStore.setEventActiveTab(data.activeIndex)}\r\n                    />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { CardGroup, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header \r\n                        floated='left' \r\n                        icon='user' \r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <CardGroup itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </CardGroup>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport 'cropperjs/dist/cropper.css'\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n  setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n  const dzStyles = {\r\n      border: 'dashed 3px #eee',\r\n      borderColor: '#eee',\r\n      borderRadius: '5px',\r\n      paddingTop: '30px',\r\n      textAlign: 'center' as 'center',\r\n      height: 200\r\n  };\r\n\r\n  const dzActive = {\r\n      borderColor: 'green'\r\n  }\r\n\r\n  const onDrop = useCallback((acceptedFiles) => {\r\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n        preview: URL.createObjectURL(file)\r\n    })))\r\n  }, [setFiles]);\r\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n  return (\r\n    <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n      <input {...getInputProps()} />\r\n      <Icon name='upload' size='huge' />\r\n      <Header content='Drop image here' />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n  const {\r\n    profileStore: {\r\n      isCurrentUser,\r\n      uploadPhoto,\r\n      uploading,\r\n      loading,\r\n      setMainPhoto,\r\n      deletePhoto,\r\n    },\r\n  } = useStore();\r\n  const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n  const [target, setTarget] = useState(\"\");\r\n\r\n  function handlePhotoUpload(file: Blob) {\r\n    uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n  }\r\n\r\n  function handleSetMainPhoto(\r\n    photo: Photo,\r\n    e: SyntheticEvent<HTMLButtonElement>\r\n  ) {\r\n    setTarget(e.currentTarget.name);\r\n    setMainPhoto(photo);\r\n  }\r\n\r\n  function handleDeletePhoto(\r\n    photo: Photo,\r\n    e: SyntheticEvent<HTMLButtonElement>\r\n  ) {\r\n    setTarget(e.currentTarget.name);\r\n    deletePhoto(photo);\r\n  }\r\n\r\n  return (\r\n    <Tab.Pane>\r\n      <Grid>\r\n        <Grid.Column width={16}>\r\n          <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n          {isCurrentUser && (\r\n            <Button\r\n              floated=\"right\"\r\n              basic\r\n              content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n              onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n            />\r\n          )}\r\n        </Grid.Column>\r\n        <Grid.Column width={16}>\r\n          {addPhotoMode ? (\r\n            <PhotoUploadWidget\r\n              uploadPhoto={handlePhotoUpload}\r\n              loading={uploading}\r\n            />\r\n          ) : (\r\n            <Card.Group itemsPerRow={5}>\r\n              {profile.photos?.map((photo) => (\r\n                <Card key={photo.id}>\r\n                  <Image src={photo.url} />\r\n                  {isCurrentUser && (\r\n                    <Button.Group fluid widths={2}>\r\n                      <Button\r\n                        basic\r\n                        color=\"green\"\r\n                        content=\"Main\"\r\n                        name={'main' + photo.id}\r\n                        disabled={photo.isMain}\r\n                        loading={target === 'main' + photo.id && loading}\r\n                        onClick={(e) => handleSetMainPhoto(photo, e)}\r\n                      />\r\n                      <Button\r\n                        basic\r\n                        color=\"red\"\r\n                        icon=\"trash\"\r\n                        name={photo.id}\r\n                        disabled={photo.isMain}\r\n                        loading={target === photo.id && loading}\r\n                        onClick={(e) => handleDeletePhoto(photo, e)}\r\n                      />\r\n                    </Button.Group>\r\n                  )}\r\n                </Card>\r\n              ))}\r\n            </Card.Group>\r\n          )}\r\n        </Grid.Column>\r\n      </Grid>\r\n    </Tab.Pane>\r\n  );\r\n});\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout profile={profile} />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <ProfileActivities />},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\r\n    ]\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const {username} = useParams<{username: string}>();\r\n    const {profileStore} = useStore();\r\n    const {loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile && \r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n                \r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import { useLocation } from \"react-router\";\r\n\r\nexport default function useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}","import React from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\n\r\nexport default function RegisterSuccess() {\r\n    const email = useQuery().get('email') as string;\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center'>\r\n            <Header icon color='green'>\r\n                <Icon name='check' />\r\n                Successfully registered!\r\n            </Header>\r\n            <p>Please check your email (including junk email) for the verification email</p>\r\n            {email &&\r\n                <>\r\n                    <p>Didn't receive the email? Click the below button to resend</p>\r\n                    <Button primary onClick={handleConfirmEmailResend}\r\n                        content='Resend email' size='huge' />\r\n                </>\r\n            }\r\n        </Segment>\r\n    )\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\nimport agent from \"../../app/api/agent\";\r\nimport useQuery from \"../../app/common/util/hooks\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"./LoginForm\";\r\n\r\nexport default function ConfirmEmail() {\r\n    const {modalStore} = useStore();\r\n    const email = useQuery().get('email') as string;\r\n    const token = useQuery().get('token') as string;\r\n\r\n    const Status = {\r\n        Verifying: 'Verifying',\r\n        Failed: 'Failed',\r\n        Success: 'Success'\r\n    }\r\n\r\n    const [status, setStatus] = useState(Status.Verifying);\r\n\r\n    function handleConfirmEmailResend() {\r\n        agent.Account.resendEmailConfirm(email).then(() => {\r\n            toast.success('Verification email resent - please check your email');\r\n        }).catch(error => console.log(error));\r\n    }\r\n\r\n    useEffect(() => {\r\n        agent.Account.verifyEmail(token, email).then(() => {\r\n            setStatus(Status.Success)\r\n        }).catch(() => {\r\n            setStatus(Status.Failed)\r\n        })\r\n    }, [Status.Failed, Status.Success, token, email])\r\n\r\n    function getBody() {\r\n        switch (status) {\r\n            case Status.Verifying:\r\n                return <p>Verifying...</p>\r\n            case Status.Failed:\r\n                return (\r\n                    <div>\r\n                        <p>Verification failed. You can try resending the verify link to your email</p>\r\n                        <Button primary onClick={handleConfirmEmailResend} size='huge' content='Resend email' />\r\n                    </div>\r\n                );\r\n            case Status.Success:\r\n                return (\r\n                    <div>\r\n                        <p>Email has been verified - you can now login</p>\r\n                        <Button \r\n                            primary \r\n                            onClick={() => modalStore.openModal(<LoginForm />)} \r\n                            size='huge' \r\n                            content='Login'\r\n                        />\r\n                    </div>\r\n                );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Segment placeholder textAlign='center' >\r\n            <Header icon>\r\n                <Icon name='envelope' />\r\n                Email verification\r\n            </Header>\r\n            <Segment.Inline>\r\n                {getBody()}\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import React from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport NavBar from './NavBar';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router-dom';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport TestErrors from '../../features/errors/TestError';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport RegisterSuccess from '../../features/users/RegisterSuccess';\r\nimport ConfirmEmail from '../../features/users/ConfirmEmail';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const {commonStore, userStore} = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route exact path='/' component={HomePage} />\r\n      <Route \r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <> \r\n            <NavBar />\r\n            <Container style={{marginTop: '7em'}}>\r\n              <Switch>\r\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route path='/account/registerSuccess' component={RegisterSuccess} />\r\n                <Route path='/account/verifyEmail' component={ConfirmEmail} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from \"history\";\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n    <StoreContext.Provider value={store}>\r\n      <Router history={history}>\r\n        <ScrollToTop />\r\n        <App />\r\n      </Router>\r\n    </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}